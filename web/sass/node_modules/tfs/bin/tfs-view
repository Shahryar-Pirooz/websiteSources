#!/usr/bin/env node

var hasError = false,
    program  = require('commander'),
    tfsView = require('../lib/tfs/view');

program
  .description('The view command retrieves a specific version of a file to a temporary folder on your computer and displays it.Required PermissionsTo use the view command, you must have the Read permission set to Allow. For more information, see Team Foundation Server Permissions.')
  .usage('[itemspec] [options]')
  .option('-c, --console', 'The URL of the team project collection that contains a specific version of a file about which you want to retrieve information (for example, http://myserver:8080/tfs/DefaultCollection).')
  .option('-r, --recursive', 'Identifies the shelveset. The optional owner argument is used to specify a shelveset that is not owned by the current user.')
  .option('-s, --shelveset', 'Identifies the file or folder to retrieve. For more information about how Team Foundation parses itemspecs to determine which items are within scope, see Command-Line Options.')
  .option('-n, --noprompt', 'Provides a value such as C3 for the /version option. For more information about how Team Foundation parses a version specification to determine which items are within its scope, see Command-Line Syntax (Version Control).')
  .option('-v, --version', 'Provides a value to the /login option. You can specify a username value as either DOMAIN\\UserName or UserName.')
  .option('-c, --collection', 'Provides the path of the folder to which you want to output the file. ')
  .option('-l, --login', 'Specifies that the file output should be directed to the console. This is useful if you want to write the file out to disk using console redirection (with a different name or location than the versioned item).')
  .option('-o, --output', 'Views all items in the specified directory and any subdirectories.')
  .option('-V, --verbose', 'Verbose mode.')
  .parse(process.argv);

var options = {
  console: program.console,
  recursive: program.recursive,
  shelveset: program.shelveset,
  noprompt: program.noprompt,
  version: program.version,
  collection: program.collection,
  login: program.login,
  output: program.output,
  verbose: program.verbose
};

tfsView(program.args, options);
