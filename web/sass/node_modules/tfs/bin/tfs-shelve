#!/usr/bin/env node

var hasError = false,
    program  = require('commander'),
    tfsShelve = require('../lib/tfs/shelve');

program
  .description('Stores a set of pending changes, together with pending check-in notes, a comment, and a list of associated work items on the server that is running Visual Studio Team Foundation Server without actually checking them into the version control server.Required PermissionsIf you want to use the shelve command to delete a shelveset, you must be a shelveset owner, or your Administer shelved changes permission must be set to Allow. For more information, see Team Foundation Server Permissions.')
  .usage('[options]')
  .option('-m, --move', 'Specifies a file system path of a file from which comments for the shelveset should be read.')
  .option('-r, --replace', 'Specifies the comment for the shelveset.')
  .option('-d, --delete', 'Identifies the files or folders to shelve. By default, all pending changes in the current workspace are shelved if this parameter is not specified. For more information about how Team Foundation parses itemspecs to determine which items are within scope, see Command-Line Options. ')
  .option('-c, --comment', 'Specifies a name by which the shelveset can be retrieved from the Team Foundation server. You can specify an existing combination of shelvesetname and owner but only if /replace is also specified. ')
  .option('-r, --recursive', 'Identifies the current or intended owner of the shelveset by user name. By default, the current user is assigned ownership of the shelveset if one is not specified.')
  .option('-n, --noprompt', 'Provides a value to the /login option. You can specify a username value as either DOMAIN\\UserName or UserName.')
  .option('-v, --validate', 'The URL of the team project collection that contains the files or folders that you want to shelve (for example, http://myserver:8080/tfs/DefaultCollection/).')
  .option('-l, --login', 'Removes pending changes from the workspace after the shelve operation is successful.')
  .option('-c, --collection', 'Replaces the existing shelveset with the same name and owner as the one that you specify. ')
  .option('-V, --verbose', 'Verbose mode.')
  .parse(process.argv);

var options = {
  move: program.move,
  replace: program.replace,
  delete: program.delete,
  comment: program.comment,
  recursive: program.recursive,
  noprompt: program.noprompt,
  validate: program.validate,
  login: program.login,
  collection: program.collection,
  verbose: program.verbose
};

tfsShelve(options);
