#!/usr/bin/env node

var hasError  = false,
    output    = require('../lib/utils/output'),
    program   = require('commander'),
    tfsStatus = require('../lib/tfs/status');

program
  .description('Displays information about pending changes.')
  .usage('[itemspec] [options]')
  .option('-c, --collection <TeamProjectCollectionUrl>', 'Specifies the team project collection.')
  .option('-f, --format <brief|detailed>', 'Specifies how much detail to display about each pending change.', /^(brief|detailed)$/i)
  .option('-l, --login <username,[password]>', 'Specifies the user account to run the command.', /^[^,]*,/)
  .option('-r, --recursive', 'Recursively retrieves data about pending changes to items in the specified directory and any subdirectories.')
  .option('-s, --shelveset <shelvesetname[;shelvesetowner]>', 'Specifies the shelveset that contains the changes you want to list.')
  .option('-u, --user <*|username>', 'Lists all pending changes made by the specified user. The default is the current user.')
  .option('-V, --verbose', 'Verbose mode.')
  .option('-w, --workspace <workspacename[;workspaceowner]>', 'Specifies the name of the workspace that contains the pending changes.')
  .parse(process.argv);

if (program.collection && typeof program.collection === 'boolean') {
  output.error('--collection option MUST be <TeamProjectCollectionUrl>".');
  hasError = true;
}

if (program.format && typeof program.format === 'boolean') {
  output.error('--format option MUST be <brief|detailed>".');
  hasError = true;
}

if (program.login && typeof program.login === 'boolean') {
  output.error('--login option MUST be <username,[password]>.');
  hasError = true;
}

if (program.shelveset && typeof program.shelveset === 'boolean') {
  output.error('--shelveset option MUST be <shelvesetname[;shelvesetowner]>.');
  hasError = true;
}

if (program.user && typeof program.user === 'boolean') {
  output.error('--user option MUST be <*|username>.');
  hasError = true;
}

if (program.workspace && typeof program.workspace === 'boolean') {
  output.error('--workspace option MUST be <workspacename[;workspaceowner]>.');
  hasError = true;
}

if (hasError) {
  program.outputHelp();
  process.exit();
}

var options = {
  collection: program.collection,
  format: program.format,
  login: program.login,
  recursive: program.recursive,
  shelveset: program.shelveset,
  user: program.user,
  verbose: program.verbose,
  workspace: program.workspace
};

tfsStatus(program.args, options, output.callback);
