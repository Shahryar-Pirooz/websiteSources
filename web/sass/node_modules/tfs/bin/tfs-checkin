#!/usr/bin/env node

var hasError   = false,
    output     = require('../lib/utils/output'),
    program    = require('commander'),
    tfsCheckin = require('../lib/tfs/checkin');

program
  .description('Commits pending changes in the current workspace.')
  .usage('[itemspec] [options]')
  .option('-a, --author [author name]', 'Identifies the author.')
  .option('-b, --bypass', 'Bypasses a gated check-in requirement.')
  .option('-c, --collection [TeamProjectCollectionUrl]', 'Specifies the team project collection.')
  .option('-C, --comment [comment]', 'Associates a comment with the changeset.')
  .option('-l, --login <username,[password]>', 'Specifies the user account to run the command.')
  .option('-n, --noprompt', 'Suppresses any prompts for input from you.')
  // .option('-N, --notes', 'Provides one or more check-in notes to associate with the changeset.')
  .option('-o, --override [reason]', 'Override a check-in policy failure.')
  .option('-r, --recursive', 'Checks in all items in the specified or implied working folder and subfolders.')
  .option('-s, --saved', 'Store check-in data on the computer in case of failure.')
  .option('-S, --shelveset [shelvesetname[;shelvesetowner]]', 'Specifies the shelveset by name.')
  .option('-v, --validate', 'The /validate option lets you test checking in without actually doing it.')
  .option('-V, --verbose', 'Verbose mode.')
  .parse(process.argv);

if (program.login && typeof program.login === 'boolean') {
  output.error('--login option MUST be <username,[password]>.');
  hasError = true;
}

if (hasError) {
  program.outputHelp();
  process.exit();
}

var options = {
  author: program.author,
  bypass: program.bypass,
  collection: program.collection,
  comment: program.comment,
  login: program.login,
  noprompt: program.noprompt,
  // notes: program.notes,
  override: program.override,
  recursive: program.recursive,
  saved: program.saved,
  shelveset: program.shelveset,
  validate: program.validate,
  verbose: program.verbose
};

tfsCheckin(program.args, options, output.callback);
